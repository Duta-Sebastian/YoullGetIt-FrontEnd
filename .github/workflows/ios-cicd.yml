name: Build and Deploy iOS

on:
  push:
    branches: [ '**' ]  # Every push to any branch
  pull_request:
    branches: [ main ]   # PRs targeting main branch

jobs:
  build-development:
    name: Build Development IPA
    runs-on: macos-latest
    if: github.event_name == 'push'  # Runs on every push
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        
    - name: Clean iOS build
      run: |
        cd ios
        rm -rf Pods
        rm -rf .symlinks
        rm -rf Flutter/Flutter.framework
        rm -rf Flutter/Flutter.podspec
        rm -f Podfile.lock
        rm -rf build/
        cd ..
        flutter clean

    - name: Get Flutter dependencies
      run: flutter pub get

    - name: Prepare Flutter for iOS
      run: |
        flutter precache --ios
        flutter build ios --config-only
        
    - name: Create/Update Podfile with SQLCipher fix
      run: |
        cd ios
        
        # Create a proper Podfile with the SQLCipher fix
        cat > Podfile << 'EOF'
        platform :ios, '14.0'

        # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
        ENV['COCOAPODS_DISABLE_STATS'] = 'true'

        project 'Runner', {
          'Debug' => :debug,
          'Profile' => :release,
          'Release' => :release,
        }

        def flutter_root
          generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
          unless File.exist?(generated_xcode_build_settings_path)
            raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
          end

          File.foreach(generated_xcode_build_settings_path) do |line|
            matches = line.match(/FLUTTER_ROOT\=(.*)/)
            return matches[1].strip if matches
          end
          raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
        end

        require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

        flutter_ios_podfile_setup

        target 'Runner' do
          use_frameworks!
          use_modular_headers!

          flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
        end

        post_install do |installer|
          installer.pods_project.targets.each do |target|
            # Fix SQLCipher duplicate bundle issue
            if target.name == 'FMDB-SQLCipher'
              target.build_configurations.each do |config|
                config.build_settings['PRODUCT_NAME'] = 'FMDBSQLCipher'
              end
            end
            
            # Set automatic code signing for all pod targets
            target.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
              # Remove manual provisioning profile settings for pods
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
            end
            
            flutter_additional_ios_build_settings(target)
          end
        end
        EOF
        
    - name: Install CocoaPods dependencies
      run: |
        cd ios
        pod install --repo-update
        echo "CocoaPods installation completed with SQLCipher fix applied"
      
    - name: Import Development Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.DEV_CERTIFICATES_P12 }}
        p12-password: ${{ secrets.DEV_CERTIFICATES_P12_PASSWORD }}
        
    - name: Download Development Provisioning Profiles
      uses: Apple-Actions/download-provisioning-profiles@v3
      with:
        bundle-id: com.youllgetit.app
        profile-type: IOS_APP_DEVELOPMENT
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Setup Code Signing (Development)
      run: |
        echo "Available provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "No provisioning profiles directory found"
        
        DEV_PROFILE_UUID=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/ | grep ".mobileprovision" | head -1 | sed 's/.mobileprovision//')
        echo "Development Profile UUID: $DEV_PROFILE_UUID"
        echo "DEV_PROFILE_UUID=$DEV_PROFILE_UUID" >> $GITHUB_ENV

    - name: Create Export Options files
      run: |
        cd ios
        
        # Create Development Export Options
        cat > ExportOptions-Development.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>JPXGBUG6ZW</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>com.youllgetit.app</key>
                <string>\$DEV_PROFILE_UUID</string>
            </dict>
        </dict>
        </plist>
        EOF

    - name: Flutter Build iOS (Development)
      run: flutter build ios --release --no-codesign
      
    - name: Build and Archive with Xcode (Development)
      run: |
        cd ios
        
        # Clean derived data
        rm -rf ~/Library/Developer/Xcode/DerivedData/Runner-*
        
        xcodebuild clean -workspace Runner.xcworkspace -scheme Runner -configuration Release
        
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/Runner-Dev.xcarchive \
          archive \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="iPhone Developer" \
          PROVISIONING_PROFILE_SPECIFIER="$DEV_PROFILE_UUID" \
          DEVELOPMENT_TEAM="JPXGBUG6ZW" \
          -allowProvisioningUpdates
          
    - name: Export Development IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/Runner-Dev.xcarchive \
          -exportPath $RUNNER_TEMP/Development \
          -exportOptionsPlist ExportOptions-Development.plist
          
    - name: Upload Development IPA as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-development-ipa
        path: ${{ runner.temp }}/Development/*.ipa

  build-production:
    name: Build App Store IPA
    runs-on: macos-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        
    - name: Clean iOS build
      run: |
        cd ios
        rm -rf Pods
        rm -rf .symlinks
        rm -rf Flutter/Flutter.framework
        rm -rf Flutter/Flutter.podspec
        rm -f Podfile.lock
        rm -rf build/
        cd ..
        flutter clean

    - name: Get Flutter dependencies
      run: flutter pub get

    - name: Prepare Flutter for iOS
      run: |
        flutter precache --ios
        flutter build ios --config-only
        
    - name: Install CocoaPods dependencies with SQLCipher fix
      run: |
        cd ios
        
        # Install pods first
        pod install --repo-update
        
        # Apply the same comprehensive fixes as development
        echo "Fixing SQLCipher duplicate bundle issue..."
        
        cat > fix_pods_project.rb << 'EOF'
        require 'xcodeproj'
        
        project_path = 'Pods/Pods.xcodeproj'
        project = Xcodeproj::Project.open(project_path)
        
        # Fix 1: Remove SQLCipher bundle from FMDB-SQLCipher target
        project.targets.each do |target|
          if target.name == 'FMDB-SQLCipher'
            puts "Fixing target: #{target.name}"
            
            # Remove resource build phases that contain SQLCipher.bundle
            target.build_phases.each do |phase|
              if phase.is_a?(Xcodeproj::Project::Object::PBXResourcesBuildPhase)
                files_to_remove = []
                phase.files.each do |file|
                  if file.file_ref && file.file_ref.path && file.file_ref.path.include?('SQLCipher')
                    files_to_remove << file
                  end
                end
                files_to_remove.each { |file| phase.files.delete(file) }
              end
            end
            
            # Remove product reference if it's SQLCipher.bundle
            if target.product_reference && target.product_reference.path == 'SQLCipher.bundle'
              target.product_reference = nil
            end
          end
        end
        
        # Fix 2: Set CODE_SIGN_STYLE to Automatic for all pod targets
        project.targets.each do |target|
          unless target.name == 'Runner'
            target.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ''
              config.build_settings.delete('PROVISIONING_PROFILE')
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
            end
          end
        end
        
        project.save
        puts "Fixed SQLCipher duplicate bundle and provisioning profile issues"
        EOF
        
        gem install xcodeproj
        ruby fix_pods_project.rb
        
        # Apply additional sed fixes
        perl -i -pe '
          if (/FMDB-SQLCipher/ .. /End PBXNativeTarget section/) {
            if (/SQLCipher\.bundle/ || /org\.cocoapods\.SQLCipher/) {
              $_ = "";
            }
          }
        ' Pods/Pods.xcodeproj/project.pbxproj
        
        sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' Pods/Pods.xcodeproj/project.pbxproj
        sed -i '' '/PROVISIONING_PROFILE_SPECIFIER.*=.*33cccf2f/d' Pods/Pods.xcodeproj/project.pbxproj
      
    - name: Import Distribution Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.DIST_CERTIFICATES_P12 }}
        p12-password: ${{ secrets.DIST_CERTIFICATES_P12_PASSWORD }}
        
    - name: Download App Store Provisioning Profiles
      uses: Apple-Actions/download-provisioning-profiles@v3
      with:
        bundle-id: com.youllgetit.app
        profile-type: IOS_APP_STORE
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Setup Code Signing (Production)
      run: |
        echo "Available provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "No provisioning profiles directory found"
        
        PROD_PROFILE_UUID=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/ | grep ".mobileprovision" | head -1 | sed 's/.mobileprovision//')
        echo "Production Profile UUID: $PROD_PROFILE_UUID"
        echo "PROD_PROFILE_UUID=$PROD_PROFILE_UUID" >> $GITHUB_ENV
        
    - name: Create Export Options files
      run: |
        cd ios
        
        # Create App Store Export Options
        cat > ExportOptions-AppStore.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>JPXGBUG6ZW</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>com.youllgetit.app</key>
                <string>\$PROD_PROFILE_UUID</string>
            </dict>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF

    - name: Flutter Build iOS (Production)
      run: flutter build ios --release --no-codesign
      
    - name: Build and Archive with Xcode (Production)
      run: |
        cd ios
        
        # Clean derived data
        rm -rf ~/Library/Developer/Xcode/DerivedData/Runner-*
        
        xcodebuild clean -workspace Runner.xcworkspace -scheme Runner -configuration Release
        
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/Runner-Prod.xcarchive \
          archive \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          PROVISIONING_PROFILE_SPECIFIER="$PROD_PROFILE_UUID" \
          DEVELOPMENT_TEAM="JPXGBUG6ZW" \
          -allowProvisioningUpdates
          
    - name: Export App Store IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/Runner-Prod.xcarchive \
          -exportPath $RUNNER_TEMP/AppStore \
          -exportOptionsPlist ExportOptions-AppStore.plist
          
    - name: Upload to App Store Connect
      run: |
        echo "IPA files created:"
        ls -la "$RUNNER_TEMP/AppStore/"
        
        IPA_FILE=$(find "$RUNNER_TEMP/AppStore" -name "*.ipa" | head -1)
        echo "Using IPA file: $IPA_FILE"
        
        xcrun altool --upload-app \
          --type ios \
          --file "$IPA_FILE" \
          --username "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_APP_PASSWORD }}" \
          --verbose
          
    - name: Upload App Store IPA as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-appstore-ipa
        path: ${{ runner.temp }}/AppStore/*.ipa