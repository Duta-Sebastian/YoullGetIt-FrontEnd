name: iOS Build Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main, master]

jobs:
  # 🔧 DEVELOPMENT BUILD - All branches except main/master
  build-development:
    name: Development Build
    runs-on: macos-latest
    if: github.ref_name != 'main' && github.ref_name != 'master'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Flutter with Cache
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
        cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ios/Pods
          ios/.symlinks
        key: ${{ runner.os }}-deps-${{ hashFiles('pubspec.lock', 'ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-deps-
        
    - name: Clean Build Artifacts
      run: |
        flutter clean
        cd ios
        rm -rf build/
        
    - name: Get Dependencies
      run: flutter pub get
      
    - name: Prepare iOS Build
      run: |
        flutter precache --ios
        flutter build ios --config-only
        
    - name: Create Fixed Podfile
      run: |
        cd ios
        cat > Podfile << 'EOF'
        platform :ios, '14.0'

        ENV['COCOAPODS_DISABLE_STATS'] = 'true'

        project 'Runner', {
          'Debug' => :debug,
          'Profile' => :release,
          'Release' => :release,
        }

        def flutter_root
          generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
          unless File.exist?(generated_xcode_build_settings_path)
            raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
          end

          File.foreach(generated_xcode_build_settings_path) do |line|
            matches = line.match(/FLUTTER_ROOT\=(.*)/)
            return matches[1].strip if matches
          end
          raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
        end

        require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

        flutter_ios_podfile_setup

        target 'Runner' do
          use_frameworks!
          use_modular_headers!
          flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
        end

        post_install do |installer|
          installer.pods_project.targets.each do |target|
            if target.name == 'FMDB-SQLCipher'
              target.build_configurations.each do |config|
                config.build_settings['PRODUCT_NAME'] = 'FMDBSQLCipher'
              end
            end
            
            target.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
              config.build_settings.delete('CODE_SIGN_IDENTITY')
            end
            
            flutter_additional_ios_build_settings(target)
          end
        end
        EOF
        
    - name: Install CocoaPods
      run: |
        cd ios
        if [ ! -f Podfile.lock ] || [ pubspec.lock -nt Podfile.lock ]; then
          pod install --repo-update
        else
          echo "Using cached pods"
        fi

    - name: Setup Keychain
      run: |
        KEYCHAIN=$HOME/Library/Keychains/build.keychain
        KEYCHAIN_PASSWORD=github-actions

        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN
        security default-keychain -s $KEYCHAIN
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN
        security set-keychain-settings -t 3600 -u $KEYCHAIN
        security list-keychains -s $KEYCHAIN $(security list-keychains -d user | tr -d '"')
        
    - name: Import Development Certificates
      env:
          P12_PASSWORD: ${{ secrets.DEV_CERTIFICATES_P12_PASSWORD }}
          DEV_CERT_BASE64: ${{ secrets.DEV_CERTIFICATES_P12 }}
      run: |
          KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain"
          echo "$DEV_CERT_BASE64" | base64 --decode > cert.p12
          security import cert.p12 -k "$KEYCHAIN_PATH" -P "$P12_PASSWORD" -T /usr/bin/codesign

    - name: Install Development Provisioning Profile
      env:
       DEV_PROVISIONING_PROFILE_BASE64: ${{ secrets.DEV_PROVISIONING_PROFILE_BASE64 }}
      run: |
        mkdir -p "$HOME/Library/Developer/Xcode/UserData/Provisioning Profiles"
        mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

        echo "$DEV_PROVISIONING_PROFILE_BASE64" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/02453868-11d4-4316-93ad-8d1e2ea59221.mobileprovision"
        cp "$HOME/Library/MobileDevice/Provisioning Profiles/02453868-11d4-4316-93ad-8d1e2ea59221.mobileprovision" "$HOME/Library/Developer/Xcode/UserData/Provisioning Profiles/02453868-11d4-4316-93ad-8d1e2ea59221.mobileprovision"
        
        ls -l ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles/  

    - name: Debug Signing Setup
      run: |
        echo "=== Available Certificates ==="
        security find-identity -v -p codesigning
        
        echo "=== Provisioning Profiles ==="
        ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/" 2>/dev/null || echo "No MobileDevice profiles"
        ls -la "$HOME/Library/Developer/Xcode/UserData/Provisioning Profiles/" 2>/dev/null || echo "No Xcode profiles"
        
        echo "=== Keychain Status ==="
        security list-keychains
        security default-keychain

    - name: Flutter Build
      run: flutter build ios --release --no-codesign
      
    - name: Archive Development Build
      run: |
        cd ios
        rm -rf ~/Library/Developer/Xcode/DerivedData/Runner-*

        KEYCHAIN_PATH="$HOME/Library/Keychains/build.keychain"

        # Set default keychain
        security default-keychain -s "$KEYCHAIN_PATH"
        security unlock-keychain -p github-actions "$KEYCHAIN_PATH"

        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath "$RUNNER_TEMP/Runner-Dev.xcarchive" \
          archive \
          "Runner:CODE_SIGN_STYLE=Manual" \
          "Runner:DEVELOPMENT_TEAM=JPXGBUG6ZW" \
          "Runner:PROVISIONING_PROFILE=02453868-11d4-4316-93ad-8d1e2ea59221"

    - name: Export Development IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/Runner-Dev.xcarchive \
          -exportPath $RUNNER_TEMP/Development \
          -exportOptionsPlist ExportOptions-Development.plist \
          
    - name: Upload Development Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-development-${{ github.sha }}
        path: ${{ runner.temp }}/Development/*.ipa
        retention-days: 30

  # 🚀 APP STORE BUILD - Main/master branches only
  build-appstore:
    name: App Store Build
    runs-on: macos-latest
    if: github.ref_name == 'main' || github.ref_name == 'master'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Flutter with Cache
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
        cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ios/Pods
          ios/.symlinks
        key: ${{ runner.os }}-deps-${{ hashFiles('pubspec.lock', 'ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-deps-
        
    - name: Clean Build Artifacts
      run: |
        flutter clean
        cd ios
        rm -rf build/
        
    - name: Get Dependencies
      run: flutter pub get
      
    - name: Run Tests
      run: flutter test
      
    - name: Prepare iOS Build
      run: |
        flutter precache --ios
        flutter build ios --config-only
        
    - name: Create Fixed Podfile
      run: |
        cd ios
        cat > Podfile << 'EOF'
        platform :ios, '14.0'

        ENV['COCOAPODS_DISABLE_STATS'] = 'true'

        project 'Runner', {
          'Debug' => :debug,
          'Profile' => :release,
          'Release' => :release,
        }

        def flutter_root
          generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
          unless File.exist?(generated_xcode_build_settings_path)
            raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
          end

          File.foreach(generated_xcode_build_settings_path) do |line|
            matches = line.match(/FLUTTER_ROOT\=(.*)/)
            return matches[1].strip if matches
          end
          raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
        end

        require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

        flutter_ios_podfile_setup

        target 'Runner' do
          use_frameworks!
          use_modular_headers!
          flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
        end

        post_install do |installer|
          installer.pods_project.targets.each do |target|
            if target.name == 'FMDB-SQLCipher'
              target.build_configurations.each do |config|
                config.build_settings['PRODUCT_NAME'] = 'FMDBSQLCipher'
              end
            end
            
            target.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
              config.build_settings.delete('CODE_SIGN_IDENTITY')
            end
            
            flutter_additional_ios_build_settings(target)
          end
        end
        EOF
        
    - name: Install CocoaPods
      run: |
        cd ios
        if [ ! -f Podfile.lock ] || [ pubspec.lock -nt Podfile.lock ]; then
          pod install --repo-update
        else
          echo "Using cached pods"
        fi
        
    - name: Import Distribution Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.DIST_CERTIFICATES_P12 }}
        p12-password: ${{ secrets.DIST_CERTIFICATES_P12_PASSWORD }}
        
    - name: Setup Keychain
      run: |
        # Create variables
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        KEYCHAIN_PASSWORD="temporary-password-12345"
        
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        
        # Add to keychain search list
        EXISTING_KEYCHAINS=$(security list-keychains -d user | sed 's/"//g')
        security list-keychains -d user -s "$KEYCHAIN_PATH" $EXISTING_KEYCHAINS
        security default-keychain -s "$KEYCHAIN_PATH"
        
        # Import certificate
        echo "${{ secrets.DIST_CERTIFICATES_P12 }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k "$KEYCHAIN_PATH" -P "${{ secrets.DIST_CERTIFICATES_P12_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/security
        rm certificate.p12
        
        # Allow codesign to access keychain without password prompt
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        
        # Verify the certificate was imported
        echo "🔍 Checking imported certificates:"
        security find-identity -v -p codesigning "$KEYCHAIN_PATH"
        
        # Export for use in build step
        echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV
        
    - name: Download App Store Provisioning Profile
      uses: Apple-Actions/download-provisioning-profiles@v3
      with:
        bundle-id: com.youllgetit.app
        profile-type: IOS_APP_STORE
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Create or Update ExportOptions Plist
      run: |
        cd ios
        # Create automatic signing version for CI/CD
        cat > ExportOptions-AppStore-Auto.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>app-store</string>
          <key>teamID</key>
          <string>JPXGBUG6ZW</string>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
          <key>signingStyle</key>
          <string>automatic</string>
          <key>stripSwiftSymbols</key>
          <true/>
          <key>destination</key>
          <string>upload</string>
          <key>manageAppVersionAndBuildNumber</key>
          <false/>
        </dict>
        </plist>
        EOF
        echo "✅ Created ExportOptions-AppStore-Auto.plist with automatic signing"
        
    - name: Setup App Store Connect API Key
      run: |
        mkdir -p ~/private_keys
        echo "${{ secrets.APPSTORE_PRIVATE_KEY }}" | base64 --decode > ~/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8
        
    - name: Flutter Build
      run: flutter build ios --release --no-codesign
      
    - name: Archive App Store Build
      run: |
        cd ios
        rm -rf ~/Library/Developer/Xcode/DerivedData/Runner-*
        
        # Use the keychain we created earlier
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Ensure keychain is unlocked and default
        security default-keychain -s $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH 2>/dev/null || true
        
        # Build with automatic provisioning
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/Runner-AppStore.xcarchive \
          archive \
          CODE_SIGN_STYLE="Automatic" \
          DEVELOPMENT_TEAM="JPXGBUG6ZW" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH"
          
    - name: Export App Store IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/Runner-AppStore.xcarchive \
          -exportPath $RUNNER_TEMP/AppStore \
          -exportOptionsPlist ExportOptions-AppStore-Auto.plist \
          -allowProvisioningUpdates
          
    - name: Upload to App Store Connect
      run: |
        IPA_FILE=$(find "$RUNNER_TEMP/AppStore" -name "*.ipa" | head -1)
        xcrun altool --upload-app \
          --type ios \
          --file "$IPA_FILE" \
          --apiKey "${{ secrets.APPSTORE_KEY_ID }}" \
          --apiIssuer "${{ secrets.APPSTORE_ISSUER_ID }}" \
          --verbose
          
    - name: Upload App Store Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-appstore-${{ github.sha }}
        path: ${{ runner.temp }}/AppStore/*.ipa
        retention-days: 90