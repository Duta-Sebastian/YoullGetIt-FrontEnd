name: iOS Build Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      upload_to_testflight:
        description: 'Upload to TestFlight after build'
        type: boolean
        required: false
        default: false

jobs:
  build:
    name: Build
    runs-on: macos-15
    
    steps:
    - name: Check available Xcode versions
      run: |
        echo "Available Xcode versions:"
        ls /Applications/ | grep Xcode
        
        # Try to find 16.4 specifically
        if [ -d "/Applications/Xcode_16.4.app" ]; then
          echo "Xcode 16.4 found!"
          sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
        else
          echo "Xcode 16.4 not available, using latest:"
          LATEST_XCODE=$(ls /Applications/ | grep "Xcode" | sort -V | tail -1)
          sudo xcode-select -s /Applications/$LATEST_XCODE/Contents/Developer
        fi
        
        xcodebuild -version

    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Flutter with Cache
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
        cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ios/Pods
          ios/.symlinks
        key: ${{ runner.os }}-deps-${{ hashFiles('pubspec.lock', 'ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-deps-
        
    - name: Clean Build Artifacts
      run: |
        flutter clean
        cd ios
        rm -rf build/
        
    - name: Get Dependencies
      run: flutter pub get
      
    - name: Prepare iOS Build
      run: |
        flutter precache --ios
        flutter build ios --config-only
        
    - name: Create Fixed Podfile
      run: |
        cd ios
        cat > Podfile << 'EOF'
        platform :ios, '14.0'

        ENV['COCOAPODS_DISABLE_STATS'] = 'true'

        project 'Runner', {
          'Debug' => :debug,
          'Profile' => :release,
          'Release' => :release,
        }

        def flutter_root
          generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
          unless File.exist?(generated_xcode_build_settings_path)
            raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
          end

          File.foreach(generated_xcode_build_settings_path) do |line|
            matches = line.match(/FLUTTER_ROOT\=(.*)/)
            return matches[1].strip if matches
          end
          raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
        end

        require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

        flutter_ios_podfile_setup

        target 'Runner' do
          use_frameworks!
          use_modular_headers!
          flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
        end

        post_install do |installer|
          installer.pods_project.targets.each do |target|
            if target.name == 'FMDB-SQLCipher'
              target.build_configurations.each do |config|
                config.build_settings['PRODUCT_NAME'] = 'FMDBSQLCipher'
              end
            end
            
            target.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
              config.build_settings.delete('CODE_SIGN_IDENTITY')
            end
            
            flutter_additional_ios_build_settings(target)
          end
        end
        EOF
        
    - name: Install CocoaPods
      run: |
        cd ios
        pod install --repo-update

    - name: Setup App Store Connect API Key
      env:
        API_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        API_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
        ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        mkdir -p ~/.appstoreconnect/private_keys
        echo "$API_KEY" > ~/.appstoreconnect/private_keys/AuthKey_$API_KEY_ID.p8
      
    - name: Archive Without Signing
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath "$RUNNER_TEMP/Runner-Dev.xcarchive" \
          archive \
          CODE_SIGNING_ALLOWED=NO

    - name: Export and Sign for App Store
      env:
        API_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
        ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/Runner-Dev.xcarchive \
          -exportPath $RUNNER_TEMP/Development \
          -exportOptionsPlist ExportOptions-AppStore.plist \
          -allowProvisioningUpdates \
          -authenticationKeyPath ~/.appstoreconnect/private_keys/AuthKey_$API_KEY_ID.p8 \
          -authenticationKeyID $API_KEY_ID \
          -authenticationKeyIssuerID $ISSUER_ID
          
    - name: Upload Development Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-development-${{ github.sha }}
        path: ${{ runner.temp }}/Development/*.ipa
        retention-days: 30

  upload-to-testflight:
    name: Upload to TestFlight
    needs: build
    runs-on: macos-latest
    # if: github.event_name == 'workflow_dispatch' && github.event.inputs.upload_to_testflight == 'true'
    
    steps:
    - name: Download IPA Artifact
      uses: actions/download-artifact@v4
      with:
        name: ios-development-${{ github.sha }}
        path: ./artifacts
    
    - name: Setup App Store Connect API Key
      env:
        API_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        API_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
        ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        mkdir -p ~/.appstoreconnect/private_keys
        echo "$API_KEY" > ~/.appstoreconnect/private_keys/AuthKey_$API_KEY_ID.p8
    
    - name: Find IPA File
      id: find_ipa
      run: |
        IPA_PATH=$(find ./artifacts -name "*.ipa" | head -1)
        
        if [ -z "$IPA_PATH" ]; then
          echo "❌ Error: No IPA file found in artifacts"
          exit 1
        fi
        
        echo "✅ Found IPA: $IPA_PATH"
        echo "ipa_path=$IPA_PATH" >> $GITHUB_OUTPUT
        
        # Display IPA info
        IPA_SIZE=$(du -h "$IPA_PATH" | cut -f1)
        echo "📦 IPA Size: $IPA_SIZE"
    
    - name: Upload to TestFlight
      env:
        API_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
        ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      run: |
        echo "🚀 Starting upload to App Store Connect..."
        
        xcrun altool --upload-app \
          --type ios \
          --file "${{ steps.find_ipa.outputs.ipa_path }}" \
          --apiKey $API_KEY_ID \
          --apiIssuer $ISSUER_ID \
          --verbose
        
        echo "✅ Upload completed successfully!"
        echo "📱 Your app will be available in TestFlight after processing (usually 5-30 minutes)"
    
    - name: Upload Summary
      if: success()
      run: |
        echo "## 🎉 TestFlight Upload Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Build SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check App Store Connect in 5-30 minutes for the processed build." >> $GITHUB_STEP_SUMMARY