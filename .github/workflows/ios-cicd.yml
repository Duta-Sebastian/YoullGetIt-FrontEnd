name: iOS Build Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main, master]

jobs:
  # 🔧 DEVELOPMENT BUILD - All branches except main/master
  build-development:
    name: Development Build
    runs-on: macos-latest
    if: github.ref_name != 'main' && github.ref_name != 'master'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Flutter with Cache
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
        cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ios/Pods
          ios/.symlinks
        key: ${{ runner.os }}-deps-${{ hashFiles('pubspec.lock', 'ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-deps-
        
    - name: Clean Build Artifacts
      run: |
        flutter clean
        cd ios
        rm -rf build/
        
    - name: Get Dependencies
      run: flutter pub get
      
    - name: Prepare iOS Build
      run: |
        flutter precache --ios
        flutter build ios --config-only
        
    - name: Create Fixed Podfile
      run: |
        cd ios
        cat > Podfile << 'EOF'
        platform :ios, '14.0'

        ENV['COCOAPODS_DISABLE_STATS'] = 'true'

        project 'Runner', {
          'Debug' => :debug,
          'Profile' => :release,
          'Release' => :release,
        }

        def flutter_root
          generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
          unless File.exist?(generated_xcode_build_settings_path)
            raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
          end

          File.foreach(generated_xcode_build_settings_path) do |line|
            matches = line.match(/FLUTTER_ROOT\=(.*)/)
            return matches[1].strip if matches
          end
          raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
        end

        require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

        flutter_ios_podfile_setup

        target 'Runner' do
          use_frameworks!
          use_modular_headers!
          flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
        end

        post_install do |installer|
          installer.pods_project.targets.each do |target|
            if target.name == 'FMDB-SQLCipher'
              target.build_configurations.each do |config|
                config.build_settings['PRODUCT_NAME'] = 'FMDBSQLCipher'
              end
            end
            
            target.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
              config.build_settings.delete('CODE_SIGN_IDENTITY')
            end
            
            flutter_additional_ios_build_settings(target)
          end
        end
        EOF
        
    - name: Install CocoaPods
      run: |
        cd ios
        if [ ! -f Podfile.lock ] || [ pubspec.lock -nt Podfile.lock ]; then
          pod install --repo-update
        else
          echo "Using cached pods"
        fi
        
    - name: Import Development Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.DEV_CERTIFICATES_P12 }}
        p12-password: ${{ secrets.DEV_CERTIFICATES_P12_PASSWORD }}
        
    - name: Download Development Provisioning Profile
      uses: Apple-Actions/download-provisioning-profiles@v3
      with:
        bundle-id: com.youllgetit.app
        profile-type: IOS_APP_DEVELOPMENT
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Get Provisioning Profile UUID
      run: |
        echo "📱 Checking provisioning profiles..."
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || true
        
        # Get the profile UUID from the downloaded profile
        PROFILE_FILE=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | head -1)
        if [ -n "$PROFILE_FILE" ]; then
          DEV_PROFILE_UUID=$(basename "$PROFILE_FILE" .mobileprovision)
          echo "DEV_PROFILE_UUID=$DEV_PROFILE_UUID" >> $GITHUB_ENV
          echo "✅ Development Profile UUID: $DEV_PROFILE_UUID"
          
          # Check profile details
          /usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i "$PROFILE_FILE") || true
          /usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<< $(security cms -D -i "$PROFILE_FILE") || true
        else
          echo "❌ No provisioning profile found!"
          exit 1
        fi
        
    - name: Flutter Build
      run: flutter build ios --release --no-codesign
      
    - name: Configure Code Signing for Runner Only
      run: |
        cd ios
        echo "🔧 Configuring code signing for Runner target..."
        
        # First, let's see what UUIDs exist in the project
        echo "📋 Current project build configurations:"
        grep -A 5 -B 5 "buildSettings" Runner.xcodeproj/project.pbxproj | grep -E "(isa = XCBuildConfiguration|buildSettings|name =)" || true
        
        # Set manual code signing ONLY for Runner target configurations
        /usr/libexec/PlistBuddy -c "Set :objects:97C147061CF9000F007C117D:buildSettings:CODE_SIGN_STYLE Manual" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:97C147071CF9000F007C117D:buildSettings:CODE_SIGN_STYLE Manual" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:249021D4217E4FDB00AE95B9:buildSettings:CODE_SIGN_STYLE Manual" Runner.xcodeproj/project.pbxproj || true
        
        # Set code sign identity for Runner
        /usr/libexec/PlistBuddy -c "Set :objects:97C147061CF9000F007C117D:buildSettings:CODE_SIGN_IDENTITY iPhone Developer" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:97C147071CF9000F007C117D:buildSettings:CODE_SIGN_IDENTITY iPhone Developer" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:249021D4217E4FDB00AE95B9:buildSettings:CODE_SIGN_IDENTITY iPhone Developer" Runner.xcodeproj/project.pbxproj || true
        
        # Set provisioning profile for Runner
        /usr/libexec/PlistBuddy -c "Set :objects:97C147061CF9000F007C117D:buildSettings:PROVISIONING_PROFILE_SPECIFIER $DEV_PROFILE_UUID" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:97C147071CF9000F007C117D:buildSettings:PROVISIONING_PROFILE_SPECIFIER $DEV_PROFILE_UUID" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:249021D4217E4FDB00AE95B9:buildSettings:PROVISIONING_PROFILE_SPECIFIER $DEV_PROFILE_UUID" Runner.xcodeproj/project.pbxproj || true
        
        echo "✅ Configured manual code signing for Runner target only"
        
    - name: Archive Development Build
      run: |
        cd ios
        rm -rf ~/Library/Developer/Xcode/DerivedData/Runner-*
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/Runner-Dev.xcarchive \
          archive \
          DEVELOPMENT_TEAM="JPXGBUG6ZW" \
          -allowProvisioningUpdates
          
    - name: Export Development IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/Runner-Dev.xcarchive \
          -exportPath $RUNNER_TEMP/Development \
          -exportOptionsPlist ExportOptions-Development.plist
          
    - name: Upload Development Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-development-${{ github.sha }}
        path: ${{ runner.temp }}/Development/*.ipa
        retention-days: 30

  # 🚀 APP STORE BUILD - Main/master branches only
  build-appstore:
    name: App Store Build
    runs-on: macos-latest
    if: github.ref_name == 'main' || github.ref_name == 'master'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Flutter with Cache
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
        cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ios/Pods
          ios/.symlinks
        key: ${{ runner.os }}-deps-${{ hashFiles('pubspec.lock', 'ios/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-deps-
        
    - name: Clean Build Artifacts
      run: |
        flutter clean
        cd ios
        rm -rf build/
        
    - name: Get Dependencies
      run: flutter pub get
      
    - name: Run Tests
      run: flutter test
      
    - name: Prepare iOS Build
      run: |
        flutter precache --ios
        flutter build ios --config-only
        
    - name: Create Fixed Podfile
      run: |
        cd ios
        cat > Podfile << 'EOF'
        platform :ios, '14.0'

        ENV['COCOAPODS_DISABLE_STATS'] = 'true'

        project 'Runner', {
          'Debug' => :debug,
          'Profile' => :release,
          'Release' => :release,
        }

        def flutter_root
          generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
          unless File.exist?(generated_xcode_build_settings_path)
            raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
          end

          File.foreach(generated_xcode_build_settings_path) do |line|
            matches = line.match(/FLUTTER_ROOT\=(.*)/)
            return matches[1].strip if matches
          end
          raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
        end

        require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

        flutter_ios_podfile_setup

        target 'Runner' do
          use_frameworks!
          use_modular_headers!
          flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
        end

        post_install do |installer|
          installer.pods_project.targets.each do |target|
            if target.name == 'FMDB-SQLCipher'
              target.build_configurations.each do |config|
                config.build_settings['PRODUCT_NAME'] = 'FMDBSQLCipher'
              end
            end
            
            target.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
              config.build_settings.delete('CODE_SIGN_IDENTITY')
            end
            
            flutter_additional_ios_build_settings(target)
          end
        end
        EOF
        
    - name: Install CocoaPods
      run: |
        cd ios
        if [ ! -f Podfile.lock ] || [ pubspec.lock -nt Podfile.lock ]; then
          pod install --repo-update
        else
          echo "Using cached pods"
        fi
        
    - name: Import Distribution Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.DIST_CERTIFICATES_P12 }}
        p12-password: ${{ secrets.DIST_CERTIFICATES_P12_PASSWORD }}
        
    - name: Download App Store Provisioning Profile
      uses: Apple-Actions/download-provisioning-profiles@v3
      with:
        bundle-id: com.youllgetit.app
        profile-type: IOS_APP_STORE
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
        
    - name: Get Provisioning Profile UUID
      run: |
        echo "📱 Checking provisioning profiles..."
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || true
        
        # Get the profile UUID from the downloaded profile
        PROFILE_FILE=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | head -1)
        if [ -n "$PROFILE_FILE" ]; then
          APPSTORE_PROFILE_UUID=$(basename "$PROFILE_FILE" .mobileprovision)
          echo "APPSTORE_PROFILE_UUID=$APPSTORE_PROFILE_UUID" >> $GITHUB_ENV
          echo "✅ App Store Profile UUID: $APPSTORE_PROFILE_UUID"
          
          # Check profile details
          /usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i "$PROFILE_FILE") || true
          /usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<< $(security cms -D -i "$PROFILE_FILE") || true
        else
          echo "❌ No provisioning profile found!"
          exit 1
        fi
        
    - name: Flutter Build
      run: flutter build ios --release --no-codesign
      
    - name: Configure Code Signing for Runner Only
      run: |
        cd ios
        echo "🔧 Configuring code signing for Runner target..."
        
        # Set manual code signing ONLY for Runner target configurations
        /usr/libexec/PlistBuddy -c "Set :objects:97C147061CF9000F007C117D:buildSettings:CODE_SIGN_STYLE Manual" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:97C147071CF9000F007C117D:buildSettings:CODE_SIGN_STYLE Manual" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:249021D4217E4FDB00AE95B9:buildSettings:CODE_SIGN_STYLE Manual" Runner.xcodeproj/project.pbxproj || true
        
        # Set code sign identity for Runner (App Store Distribution)
        /usr/libexec/PlistBuddy -c "Set :objects:97C147061CF9000F007C117D:buildSettings:CODE_SIGN_IDENTITY iPhone Distribution" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:97C147071CF9000F007C117D:buildSettings:CODE_SIGN_IDENTITY iPhone Distribution" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:249021D4217E4FDB00AE95B9:buildSettings:CODE_SIGN_IDENTITY iPhone Distribution" Runner.xcodeproj/project.pbxproj || true
        
        # Set provisioning profile for Runner
        /usr/libexec/PlistBuddy -c "Set :objects:97C147061CF9000F007C117D:buildSettings:PROVISIONING_PROFILE_SPECIFIER $APPSTORE_PROFILE_UUID" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:97C147071CF9000F007C117D:buildSettings:PROVISIONING_PROFILE_SPECIFIER $APPSTORE_PROFILE_UUID" Runner.xcodeproj/project.pbxproj || true
        /usr/libexec/PlistBuddy -c "Set :objects:249021D4217E4FDB00AE95B9:buildSettings:PROVISIONING_PROFILE_SPECIFIER $APPSTORE_PROFILE_UUID" Runner.xcodeproj/project.pbxproj || true
        
        echo "✅ Configured manual code signing for Runner target only"
        
    - name: Archive App Store Build
      run: |
        cd ios
        rm -rf ~/Library/Developer/Xcode/DerivedData/Runner-*
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/Runner-AppStore.xcarchive \
          archive \
          DEVELOPMENT_TEAM="JPXGBUG6ZW" \
          -allowProvisioningUpdates
          
    - name: Export App Store IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/Runner-AppStore.xcarchive \
          -exportPath $RUNNER_TEMP/AppStore \
          -exportOptionsPlist ExportOptions-AppStore.plist
          
    - name: Upload to App Store Connect
      run: |
        IPA_FILE=$(find "$RUNNER_TEMP/AppStore" -name "*.ipa" | head -1)
        xcrun altool --upload-app \
          --type ios \
          --file "$IPA_FILE" \
          --username "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_APP_PASSWORD }}" \
          --verbose
          
    - name: Upload App Store Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-appstore-${{ github.sha }}
        path: ${{ runner.temp }}/AppStore/*.ipa
        retention-days: 90